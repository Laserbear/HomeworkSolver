import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.imageio.ImageIO;

import org.apache.commons.codec.Charsets;

import com.wolfram.alpha.WAEngine;
import com.wolfram.alpha.WAException;
import com.wolfram.alpha.WAPlainText;
import com.wolfram.alpha.WAPod;
import com.wolfram.alpha.WAQuery;
import com.wolfram.alpha.WAQueryResult;
import com.wolfram.alpha.WASubpod;

public class WolframTesseract {
	private static String appid = "2GGY3Y-9YKTWQ434K";
	final String path = "C:/Users/Tehas_2/Desktop/";
	
	public void print(Object o) {
		System.out.println(o);
	}
	
	public void sleep(long ms) {
		try {
			Thread.sleep(ms);
		} catch (Exception ex) {}
	}
	
	public String getEquation(String inputFile) {
		final String path = "C:/Users/Tehas_2/Desktop/";
		String input = path + inputFile;
		String output = path + "output";
		ProcessBuilder pb = new ProcessBuilder(
							"C:/Program Files (x86)/Tesseract-OCR/tesseract.exe",
							input, output);//, "makebox");//"--tessdata-dir equ.traineddata");
		try {
			pb.start();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		String equ;
		try {
			equ = Files.readAllLines(Paths.get(output + ".txt"), Charsets.UTF_8).get(0);
		} catch (IOException e) {
			e.printStackTrace();
			equ = "error";
		}
		
		return equ;
	}
	
	public String solveEquation(String equ) {
		WAEngine engine = new WAEngine();
        
        // These properties will be set in all the WAQuery objects created from this WAEngine.
        engine.setAppID(appid);
        engine.addFormat("plaintext");

        // Create the query.
        WAQuery query = engine.createQuery();
        
        // Set properties of the query.
        query.setInput(equ);
        
        try {
            // For educational purposes, print out the URL we are about to send:
            System.out.println("Query URL:");
            System.out.println(engine.toURL(query));
            System.out.println("");
            
            // This sends the URL to the Wolfram|Alpha server, gets the XML result
            // and parses it into an object hierarchy held by the WAQueryResult object.
            WAQueryResult queryResult = engine.performQuery(query);
            
            if (queryResult.isError()) {
                System.out.println("Query error");
                System.out.println("  error code: " + queryResult.getErrorCode());
                System.out.println("  error message: " + queryResult.getErrorMessage());
            } else if (!queryResult.isSuccess()) {
                System.out.println("Query was not understood; no results available.");
            } else {
                // Got a result.
                //System.out.println("Successful query. Pods follow:\n");
                for (WAPod pod : queryResult.getPods()) {
                    if (!pod.isError() && pod.getTitle().equals("Solution")) {
                        //System.out.println(pod.getTitle());
                        //System.out.println("------------");
                        for (WASubpod subpod : pod.getSubpods()) {
                            for (Object element : subpod.getContents()) {
                                if (element instanceof WAPlainText) {
                                    return ((WAPlainText) element).getText();
                                }
                            }
                        }
                        //System.out.println("");
                    }
                }
                
                // We ignored many other types of Wolfram|Alpha output, such as warnings, assumptions, etc.
                // These can be obtained by methods of WAQueryResult or objects deeper in the hierarchy.
            }
        } catch (WAException e) {
            e.printStackTrace();
        }
        return "error";
	}
}
